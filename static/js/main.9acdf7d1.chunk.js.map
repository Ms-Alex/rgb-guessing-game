{"version":3,"sources":["components/GameHeader.js","components/GameControls.js","components/GameSquares.js","App.js","serviceWorker.js","index.js"],"names":["GameHeader","react_default","a","createElement","id","class","this","props","colorGuess","Component","GameControls","_this","className","onClick","randomColors","newGameText","progressText","gameDifficulty","GameSquares","differentSquares","colorsArr","map","color","i","key","UUID","style","backgroundColor","concat","checkClickedColor","App","state","difficulty","num","setState","newColors","push","Math","floor","random","newColorGuess","winCheck","sameColor","sameColorArr","Array","fill","changeWrongColor","index","newArr","Object","toConsumableArray","changeGameHeaderColor","$","css","toggleClassSelected","addClass","removeClass","components_GameHeader","components_GameControls","components_GameSquares","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9acdf7d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GameHeader extends Component {\n    render() {\n        return <div id=\"game-header\">\n            <h1>\n              The Cool \n              <br />\n              <span class=\"pickedColor\">{this.props.colorGuess}</span> \n              <br />\n              Guessing Game\n            </h1>\n          </div>;\n    }\n}\n\nexport default GameHeader;\n","import React, { Component } from 'react';\n\nclass GameControls extends Component {\n    render() {\n        return <div className=\"game-controls\">\n            <button className=\"new-game\" onClick={() => this.props.randomColors(6)}>\n              {this.props.newGameText}\n            </button>\n            <span className=\"progress-text\">\n              {this.props.progressText}\n            </span>\n            <button id=\"easyBtn\" className=\"level\" onClick={() => this.props.gameDifficulty(3)}>\n              Easy\n            </button>\n            &nbsp;\n            <button id=\"hardBtn\" className=\"level\" onClick={() => this.props.gameDifficulty(6)}>\n              Hard\n            </button>\n          </div>;\n    }\n}\n\nexport default GameControls;\n","import React, { Component } from 'react';\nimport UUID from 'uuid';\n\nclass GameSquares extends Component {\n    differentSquares = () => {\n        return this.props.colorsArr.map((color, i) => (\n          <div key={UUID()} className=\"square\" style={{backgroundColor: `${color}`}} onClick={() => this.props.checkClickedColor(color, i)} />\n        ));\n    }\n\n    render() {\n        return (\n            <div className=\"game-squares\">\n\n                {this.differentSquares()}\n\n            </div>\n        );\n    }\n}\n\nexport default GameSquares;\n","import React, { Component } from 'react';\nimport GameHeader from './components/GameHeader';\nimport GameControls from './components/GameControls';\nimport GameSquares from './components/GameSquares';\nimport './App.css';\nimport $ from 'jquery';\n\nclass App extends Component {\n  state = {\n    difficulty: 6,\n    colorsArr: [],\n    colorGuess: \"\",\n    progressText: \"\",\n    newGameText: \"New Colors\"\n  }\n\n  componentDidMount(){\n    this.randomColors(this.state.difficulty);\n  }\n\n  gameDifficulty = (num) => {\n    if(num !== this.state.difficulty && this.state.newGameText === \"New Colors\"){\n      this.setState({\n        difficulty: num\n      }, () => this.randomColors(this.state.difficulty));\n    }\n  }\n\n  randomColors = () => {\n    let newColors = [];\n    for(let i = 0; i < this.state.difficulty; i++){\n      newColors.push(`rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`)\n    }\n    let newColorGuess = newColors[Math.floor(Math.random() * (this.state.difficulty-1))];\n    this.setState({\n      colorsArr: newColors, \n      colorGuess: newColorGuess\n    }, () => this.winCheck() );\n  }\n\n  sameColor = (color) => {\n    let sameColorArr = new Array(this.state.difficulty).fill(color)\n    this.setState({\n      colorsArr: sameColorArr\n    });\n  }\n\n  winCheck = () => {\n    if (this.state.newGameText !== \"New Colors\") this.setState({ newGameText: \"New Colors\", progressText: \"\" })\n  }\n\n  changeWrongColor = (index) => {\n    let newArr = [...this.state.colorsArr];\n    newArr[index] = \"rgb(35, 35, 35)\";\n    this.setState({\n      colorsArr: newArr\n    });\n  }\n\n  changeGameHeaderColor = (color) => {\n    if(this.state.newGameText === \"Play Again?\") {\n      $(\"#game-header\").css(\"background-color\", `${color}`);\n    } else if (this.state.newGameText === \"New Colors\") {\n      $(\"#game-header\").css(\"background-color\", \"#c64cff\");\n    }\n  }\n\n  checkClickedColor = (color, index) => {\n    // set progressText \n    if(color === this.state.colorGuess){\n      this.sameColor(color);\n      this.setState({\n        newGameText: \"Play Again?\",\n        progressText: \"Correct!\"\n      });\n    } else {\n      this.changeWrongColor(index);\n      this.setState({\n        progressText: \"Try Again\"\n      });\n    }\n  }\n\n  toggleClassSelected = () => {\n    if(this.state.difficulty === 6){\n      $(\"#hardBtn\").addClass(\"selected\");\n      $(\"#easyBtn\").removeClass(\"selected\");\n    } else {\n      $(\"#easyBtn\").addClass(\"selected\");\n      $(\"#hardBtn\").removeClass(\"selected\");\n    }\n  }\n\n  render() {\n\n    return <div className=\"App\">\n\n        <GameHeader colorGuess={this.state.colorGuess} newGameText={this.state.newGameText} changeGameHeaderColor={this.changeGameHeaderColor} />\n        <GameControls randomColors={this.randomColors} progressText={this.state.progressText} gameDifficulty={this.gameDifficulty} newGameText={this.state.newGameText} />\n        <GameSquares colorsArr={this.state.colorsArr} checkClickedColor={this.checkClickedColor} />\n\n        {this.changeGameHeaderColor(this.state.colorGuess)}\n        {this.toggleClassSelected()}\n\n      </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}